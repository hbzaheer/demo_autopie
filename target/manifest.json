{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.1", "generated_at": "2022-02-20T09:09:26.831974Z", "invocation_id": "42508b2f-f717-4cd5-9f3b-5f8b7a459b7a", "env": {}, "project_id": "8305169b49754a3929c3decc44773ada", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "postgres"}, "nodes": {"model.demo_autopie.demo_data_prep": {"raw_sql": "------------- PREPARE DATASETS -------------------\nSET client_min_messages TO WARNING;\n\ndrop schema if exists testsatmap cascade;\ncreate schema testsatmap;\n\ndrop table if exists testsatmap.calltable;\n\ncreate table testsatmap.calltable\n(\n\tcall_id varchar(16),\n\tcall_start_epoch bigint,\n\tcall_duration int,\n\tcustomer_id varchar(100),\n\tagent_id varchar(20)\n);\n\ninsert into testsatmap.calltable values ('00000001', 1600000000, 45, 'c1', 'alice');\ninsert into testsatmap.calltable values ('00000002', 1600000100, 45, 'c2', 'alice');\ninsert into testsatmap.calltable values ('00000003', 1600000200, 35, 'c3', 'alice');\n\ninsert into testsatmap.calltable values ('00000004', 1600000000, 30, 'c4', 'bob');\ninsert into testsatmap.calltable values ('00000005', 1600000050, 90, 'c5', 'bob');\ninsert into testsatmap.calltable values ('00000006', 1600000250, 30, 'c6', 'bob');\n\ninsert into testsatmap.calltable values ('00000007', 1600000010, 60, 'c7', 'charlie');\ninsert into testsatmap.calltable values ('00000008', 1600000090, 30, 'c8', 'charlie');\ninsert into testsatmap.calltable values ('00000009', 1600000150, 60, 'c9', 'charlie');\n\ninsert into testsatmap.calltable values ('00000010', 1600100000, 60, 'c10', 'alice');\n\n\ndrop table if exists testsatmap.calldispositions;\n\ncreate table testsatmap.calldispositions\n(\n\tdisposition_epoch bigint,\n\tcustomer_id varchar(100),\n\tagent_id varchar(20),\n\tdisp_code varchar(10)\n);\n\ninsert into testsatmap.calldispositions values (1600000040, 'c1', 'alice', 'k');\ninsert into testsatmap.calldispositions values (1600000150, 'c2', 'alice', 'k');\ninsert into testsatmap.calldispositions values (1600000210, 'c3', 'alice', 'm');\n\ninsert into testsatmap.calldispositions values (1600000020, 'c4', 'bob', 'a');\ninsert into testsatmap.calldispositions values (1600000040, 'c5', 'bob', 'k');\ninsert into testsatmap.calldispositions values (1600000270, 'c6', 'bob', 'k');\n\ninsert into testsatmap.calldispositions values (1600000040, 'c7', 'charlie', 'k');\ninsert into testsatmap.calldispositions values (1600000120, 'c8', 'charlie', 'm');\ninsert into testsatmap.calldispositions values (1600000200, 'c9', 'charlie', 'a');\n\ninsert into testsatmap.calldispositions values (1600100020, 'c10', 'alice', 'k');\n\ndrop table if exists testsatmap.outcomes;\n\ncreate table testsatmap.outcomes\n(\n\toutcome_date date,\n\tcustomer_id varchar(100),\n\toutcome_code varchar(10)\n);\n\ninsert into testsatmap.outcomes values (to_date('2020-09-14', 'YYYY-MM-DD'), 'c1', '100');\ninsert into testsatmap.outcomes values (to_date('2020-09-15', 'YYYY-MM-DD'), 'c1', '10');\ninsert into testsatmap.outcomes values (to_date('2020-09-15', 'YYYY-MM-DD'), 'c2', '200');\ninsert into testsatmap.outcomes values (to_date('2020-09-15', 'YYYY-MM-DD'), 'c6', '100');\ninsert into testsatmap.outcomes values (to_date('2020-09-17', 'YYYY-MM-DD'), 'c7', '100');\n\ndrop table if exists testsatmap.crm;\n\ncreate table testsatmap.crm\n(\n\tdata_date date,\n\tcustomer_id varchar(100),\n\tcustomer_cat_attrib varchar(10),\n\tcustomer_num_attrib numeric\n);\n\ninsert into testsatmap.crm values (to_date('2020-09-10', 'YYYY-MM-DD'), 'c1', 'premium', '500');\ninsert into testsatmap.crm values (to_date('2020-09-10', 'YYYY-MM-DD'), 'c2', 'gold', '300');\ninsert into testsatmap.crm values (to_date('2020-08-10', 'YYYY-MM-DD'), 'c2', 'gold', '310');\n\ninsert into testsatmap.crm values (to_date('2020-07-10', 'YYYY-MM-DD'), 'c4', 'silver', '400');\ninsert into testsatmap.crm values (to_date('2020-09-10', 'YYYY-MM-DD'), 'c4', 'silver', '500');\ninsert into testsatmap.crm values (to_date('2020-09-10', 'YYYY-MM-DD'), 'c5', 'gold', '500');\ninsert into testsatmap.crm values (to_date('2020-09-10', 'YYYY-MM-DD'), 'c6', 'premium', '500');\n\ninsert into testsatmap.crm values (to_date('2020-09-01', 'YYYY-MM-DD'), 'c7', 'silver', '100');\ninsert into testsatmap.crm values (to_date('2020-09-01', 'YYYY-MM-DD'), 'c8', 'silver', '100');\ninsert into testsatmap.crm values (to_date('2020-09-01', 'YYYY-MM-DD'), 'c9', 'silver', '100');\n\ndrop table if exists testsatmap.product_ownership;\n\ncreate table testsatmap.product_ownership\n(\n\tcustomer_id varchar(100),\n\tproduct_id varchar(100),\n\tsubscription_date date,\n\tdeactivation_date date\n);\n\ninsert into testsatmap.product_ownership values ('c1', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-05', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c1', 'p2', to_date('2020-09-02', 'YYYY-MM-DD'), to_date('2020-09-20', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c2', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-20', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c2', 'p2', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-30', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c2', 'p3', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-10-01', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c3', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-10', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c4', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-15', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c5', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-25', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c6', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-15', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c6', 'p2', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-25', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c7', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-02', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c7', 'p2', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-15', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c8', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-25', 'YYYY-MM-DD'));\ninsert into testsatmap.product_ownership values ('c9', 'p1', to_date('2020-09-01', 'YYYY-MM-DD'), to_date('2020-09-05', 'YYYY-MM-DD'));", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "demo_data_prep"], "unique_id": "model.demo_autopie.demo_data_prep", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/demo_data_prep.sql", "original_file_path": "models/demo_ebp_flow/demo_data_prep.sql", "name": "demo_data_prep", "alias": "demo_data_prep", "checksum": {"name": "sha256", "checksum": "c98aad26156ad88e0aeb6ff886c75f63ab752519368699feefb53639ee0173e1"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645337038.002315}, "model.demo_autopie.phase1_fact_calls": {"raw_sql": "create or replace view autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 as\nselect \"call_id\"::text as \"call_id\", \n       \"call_start_epoch\"::bigint as \"call_start_epoch\", \n       \"call_duration\"::int as \"call_duration\", \n       \"customer_id\"::text as \"customer_id\", \n       \"agent_id\"::text as \"agent_id\"\n       from testsatmap.calltable;\n\n\ncreate or replace view autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 as\nselect  (call_id)::text as call_id, \n        (to_timestamp(call_start_epoch))::timestamptz as time_call_start, \n        (to_timestamp(call_start_epoch + call_duration))::timestamptz as time_call_end, \n        (call_duration)::int4 as num_duration_seconds, \n        (trim(customer_id))::text as customer_id, \n        (lower(trim(agent_id)))::text as agent_id\n        from autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000;\n\n\ndrop table if exists autopie_ebpdemo.tmp_staging_fact_0000000000;\ncreate table autopie_ebpdemo.tmp_staging_fact_0000000000 as\n(\n    with expression_extract_1 as\n    (\n        select * from autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000\n    ),\n    expression_extract_2 as\n    (\n        select  t.*,\n                (round(num_duration_seconds/60,2))::numeric as num_duration_minutes\n                from expression_extract_1 t\n    ),\n    filter__3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n        where 1=1\n        and agent_id is not null\n        and customer_id is not null\n        and num_duration_seconds > 10\n    ),\n    incremental_extract__4 as\n    (\n        select /* retrieving incremental data - by date range only */ *\n        from filter__3\n        where time_call_start >= to_date('2020-01-01', 'YYYY-MM-DD')\n          and time_call_start  < to_date('2021-01-01', 'YYYY-MM-DD')\n    ),\n    deduplication__5 as\n    (\n        select /* deduplicate by strategy */\n               call_id\n               , max(time_call_start) as time_call_start\n               , max(time_call_end) as time_call_end\n               , max(num_duration_seconds) as num_duration_seconds\n               , max(customer_id) as customer_id\n               , max(agent_id) as agent_id\n               , max(num_duration_minutes) as num_duration_minutes\n        from incremental_extract__4\n        group by call_id \n    ),\n    coarsening_6 as\n    (\n        select * from deduplication__5\n    )\n    select  t.*,\n            1 autopie_run_id\n    from coarsening_6 t\n);\n\ndrop view if exists autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 cascade;\ndrop view if exists autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 cascade;\n\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n)\nthen\n    create table autopie_ebpdemo.obj_fact_calls as (select * from autopie_ebpdemo.tmp_staging_fact_0000000000 where 1=0);\n    alter  table autopie_ebpdemo.obj_fact_calls add column row_id bigserial not null;\n    alter  table autopie_ebpdemo.obj_fact_calls add primary key (call_id, time_call_end);\n    --\n    create index ixrid_obj_fact_calls on autopie_ebpdemo.obj_fact_calls(row_id);\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from autopie_ebpdemo.obj_fact_calls where (call_id, time_call_end) in (select call_id, time_call_end from autopie_ebpdemo.tmp_staging_fact_0000000000);\ninsert into autopie_ebpdemo.obj_fact_calls select * from autopie_ebpdemo.tmp_staging_fact_0000000000;\ndrop table autopie_ebpdemo.tmp_staging_fact_0000000000;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase1_fact_calls"], "unique_id": "model.demo_autopie.phase1_fact_calls", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase1_fact_calls.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase1_fact_calls.sql", "name": "phase1_fact_calls", "alias": "phase1_fact_calls", "checksum": {"name": "sha256", "checksum": "b3cdf38913a73baa140ce96e2b7970048be3875635d77bc320737bc5b323078f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348160.759273}, "model.demo_autopie.phase1_fact_outcomes": {"raw_sql": "create or replace view autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 as\nselect \"outcome_date\"::date as \"outcome_date\", \n       \"customer_id\"::text as \"customer_id\", \n       \"outcome_code\"::text as \"outcome_code\"\n       from testsatmap.outcomes;\n\n\ncreate or replace view autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 as\nselect  (outcome_date)::date as date_outcome, \n        (trim(customer_id))::text as customer_id, \n        (outcome_code::numeric)::numeric as num_outcome_amount\n        from autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000;\n\n\ndrop table if exists autopie_ebpdemo.tmp_staging_fact_0000000000;\ncreate table autopie_ebpdemo.tmp_staging_fact_0000000000 as\n(\n    with expression_extract_1 as\n    (\n        select * from autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000\n    ),\n    expression_extract_2 as\n    (\n        select * from expression_extract_1\n    ),\n    filter__3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n        where 1=1\n        and num_outcome_amount > 0\n        and customer_id is not null\n    ),\n    incremental_extract__4 as\n    (\n        select /* retrieving incremental data - by date range only */ *\n        from filter__3\n        where date_outcome >= to_date('2020-01-01', 'YYYY-MM-DD')\n          and date_outcome  < to_date('2021-01-01', 'YYYY-MM-DD')\n    ),\n    deduplication__5 as\n    (\n        select /* deduplicate by strategy */\n               customer_id, date_outcome, num_outcome_amount\n        from incremental_extract__4\n        group by customer_id, date_outcome, num_outcome_amount \n    ),\n    coarsening_6 as\n    (\n        select /* flatten all dimensions, fit into EAVT format */\n              customer_id\n              , date_outcome\n              \n              , sum(num_outcome_amount) as sum_outcome_amount\n              from deduplication__5\n        group by customer_id, date_outcome\n    )\n    select  t.*,\n            1 autopie_run_id\n    from coarsening_6 t\n);\n\ndrop view if exists autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 cascade;\ndrop view if exists autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 cascade;\n\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_outcomes'\n)\nthen\n    create table autopie_ebpdemo.obj_fact_outcomes as (select * from autopie_ebpdemo.tmp_staging_fact_0000000000 where 1=0);\n    alter  table autopie_ebpdemo.obj_fact_outcomes add column row_id bigserial not null;\n    alter  table autopie_ebpdemo.obj_fact_outcomes add primary key (customer_id, date_outcome);\n    --\n    create index ixrid_obj_fact_outcomes on autopie_ebpdemo.obj_fact_outcomes(row_id);\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from autopie_ebpdemo.obj_fact_outcomes where (customer_id, date_outcome) in (select customer_id, date_outcome from autopie_ebpdemo.tmp_staging_fact_0000000000);\ninsert into autopie_ebpdemo.obj_fact_outcomes select * from autopie_ebpdemo.tmp_staging_fact_0000000000;\ndrop table autopie_ebpdemo.tmp_staging_fact_0000000000;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase1_fact_outcomes"], "unique_id": "model.demo_autopie.phase1_fact_outcomes", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase1_fact_outcomes.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase1_fact_outcomes.sql", "name": "phase1_fact_outcomes", "alias": "phase1_fact_outcomes", "checksum": {"name": "sha256", "checksum": "249922522e8ef479dea4cdb68c9cd0a47380c7e646c3f3d183cc536870723b31"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348162.008236}, "model.demo_autopie.phase1_fact_crm": {"raw_sql": "create or replace view autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 as\nselect \"data_date\"::date as \"data_date\", \n       \"customer_id\"::text as \"customer_id\", \n       \"customer_cat_attrib\"::text as \"customer_cat_attrib\", \n       \"customer_num_attrib\"::numeric as \"customer_num_attrib\"\n       from testsatmap.crm;\n\n\ncreate or replace view autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 as\nselect  (data_date)::date as date_data, \n        (trim(customer_id))::text as customer_id, \n        (customer_num_attrib)::numeric as num_attrib, \n        (customer_cat_attrib)::text as cat_attrib\n        from autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000;\n\n\ndrop table if exists autopie_ebpdemo.tmp_staging_fact_0000000000;\ncreate table autopie_ebpdemo.tmp_staging_fact_0000000000 as\n(\n    with expression_extract_1 as\n    (\n        select * from autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000\n    ),\n    expression_extract_2 as\n    (\n        select * from expression_extract_1\n    ),\n    filter__3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n        where 1=1\n        and customer_id is not null\n    ),\n    incremental_extract__4 as\n    (\n        select /* retrieving incremental data - by date range only */ *\n        from filter__3\n        where date_data >= to_date('2020-01-01', 'YYYY-MM-DD')\n          and date_data  < to_date('2021-01-01', 'YYYY-MM-DD')\n    ),\n    deduplication__5 as\n    (\n        select /* deduplicate by strategy */\n               customer_id, date_data\n               , max(num_attrib) as num_attrib\n               , max(cat_attrib) as cat_attrib\n        from incremental_extract__4\n        group by customer_id, date_data \n    ),\n    coarsening_6 as\n    (\n        select * from deduplication__5\n    )\n    select  t.*,\n            1 autopie_run_id\n    from coarsening_6 t\n);\n\ndrop view if exists autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 cascade;\ndrop view if exists autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 cascade;\n\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_crm'\n)\nthen\n    create table autopie_ebpdemo.obj_fact_crm as (select * from autopie_ebpdemo.tmp_staging_fact_0000000000 where 1=0);\n    alter  table autopie_ebpdemo.obj_fact_crm add column row_id bigserial not null;\n    alter  table autopie_ebpdemo.obj_fact_crm add primary key (customer_id, date_data);\n    --\n    create index ixrid_obj_fact_crm on autopie_ebpdemo.obj_fact_crm(row_id);\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from autopie_ebpdemo.obj_fact_crm where (customer_id, date_data) in (select customer_id, date_data from autopie_ebpdemo.tmp_staging_fact_0000000000);\ninsert into autopie_ebpdemo.obj_fact_crm select * from autopie_ebpdemo.tmp_staging_fact_0000000000;\ndrop table autopie_ebpdemo.tmp_staging_fact_0000000000;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase1_fact_crm"], "unique_id": "model.demo_autopie.phase1_fact_crm", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase1_fact_crm.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase1_fact_crm.sql", "name": "phase1_fact_crm", "alias": "phase1_fact_crm", "checksum": {"name": "sha256", "checksum": "b6661a28eff789060841bc87e940f050e3a34955b0f059b266a88a1c3c56758a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348163.2461052}, "model.demo_autopie.phase1_fact_dispositions": {"raw_sql": "create or replace view autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 as\nselect \"disposition_epoch\"::bigint as \"disposition_epoch\", \n       \"customer_id\"::text as \"customer_id\", \n       \"agent_id\"::text as \"agent_id\", \n       \"disp_code\"::text as \"disp_code\"\n       from testsatmap.calldispositions;\n\n\ncreate or replace view autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 as\nselect  (to_timestamp(disposition_epoch))::timestamptz as time_disposition_made, \n        (trim(customer_id))::text as customer_id, \n        (lower(trim(agent_id)))::text as agent_id, \n        (lower(trim(disp_code)))::text as cat_disposition\n        from autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000;\n\n\ndrop table if exists autopie_ebpdemo.tmp_staging_fact_0000000000;\ncreate table autopie_ebpdemo.tmp_staging_fact_0000000000 as\n(\n    with expression_extract_1 as\n    (\n        select * from autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000\n    ),\n    expression_extract_2 as\n    (\n        select * from expression_extract_1\n    ),\n    filter__3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n        where 1=1\n        and agent_id is not null\n        and customer_id is not null\n        and cat_disposition in ('k', 'm', 'a')\n    ),\n    incremental_extract__4 as\n    (\n        select /* retrieving incremental data - by date range only */ *\n        from filter__3\n        where time_disposition_made >= to_date('2020-01-01', 'YYYY-MM-DD')\n          and time_disposition_made  < to_date('2021-01-01', 'YYYY-MM-DD')\n    ),\n    deduplication__5 as\n    (\n        select /* deduplicate by strategy */\n               agent_id, cat_disposition, time_disposition_made\n               , max(customer_id) as customer_id\n        from incremental_extract__4\n        group by agent_id, cat_disposition, time_disposition_made \n    ),\n    coarsening_6 as\n    (\n        select /* flatten all dimensions, fit into EAVT format */\n              agent_id\n              , time_disposition_made\n              \n              , max(customer_id) as customer_id\n              , sum(case when cat_disposition = 'k' then 1 else 0 end) as flg_k_disp_made\n              , sum(case when cat_disposition = 'm' then 1 else 0 end) as flg_m_disp_made\n              , sum(case when cat_disposition = 'a' then 1 else 0 end) as flg_a_disp_made\n              from deduplication__5\n        group by agent_id, time_disposition_made\n    )\n    select  t.*,\n            1 autopie_run_id\n    from coarsening_6 t\n);\n\ndrop view if exists autopie_ebpdemo.tmp_staging_view_source_extract_0_0000000000 cascade;\ndrop view if exists autopie_ebpdemo.tmp_staging_view_expression_extract_1_0000000000 cascade;\n\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_dispositions'\n)\nthen\n    create table autopie_ebpdemo.obj_fact_dispositions as (select * from autopie_ebpdemo.tmp_staging_fact_0000000000 where 1=0);\n    alter  table autopie_ebpdemo.obj_fact_dispositions add column row_id bigserial not null;\n    alter  table autopie_ebpdemo.obj_fact_dispositions add primary key (agent_id, time_disposition_made);\n    --\n    create index ixrid_obj_fact_dispositions on autopie_ebpdemo.obj_fact_dispositions(row_id);\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from autopie_ebpdemo.obj_fact_dispositions where (agent_id, time_disposition_made) in (select agent_id, time_disposition_made from autopie_ebpdemo.tmp_staging_fact_0000000000);\ninsert into autopie_ebpdemo.obj_fact_dispositions select * from autopie_ebpdemo.tmp_staging_fact_0000000000;\ndrop table autopie_ebpdemo.tmp_staging_fact_0000000000;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase1_fact_dispositions"], "unique_id": "model.demo_autopie.phase1_fact_dispositions", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase1_fact_dispositions.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase1_fact_dispositions.sql", "name": "phase1_fact_dispositions", "alias": "phase1_fact_dispositions", "checksum": {"name": "sha256", "checksum": "e25db98059a852c121108254a311e5d1f1307719b94db596191f06eccc9e0eeb"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348164.4976058}, "model.demo_autopie.phase2_window_next_agent": {"raw_sql": "drop table if exists autopie_ebpdemo.tmp_alter_staging_0000000000;\ncreate table autopie_ebpdemo.tmp_alter_staging_0000000000 as\n(\n  select  row_id,\n          /* calculate window functions on whole fact table - TODO, will optimize this */\n          lead(time_call_start) over (partition by agent_id order by time_call_start) as time_agent_next_call, \n          lag(time_call_start) over (partition by agent_id order by time_call_start) as time_agent_prev_call\n  from autopie_ebpdemo.obj_fact_calls\n);\n\nalter table autopie_ebpdemo.tmp_alter_staging_0000000000 add primary key (row_id);\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n  select 1 from information_schema.columns \n  where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n  and column_name = 'time_agent_next_call'\n)\nthen\n  alter table autopie_ebpdemo.obj_fact_calls add column time_agent_next_call timestamp;\nend if;\nend\n$$;\ndo $$                  \nbegin\nif not exists\n( \n  select 1 from information_schema.columns \n  where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n  and column_name = 'time_agent_prev_call'\n)\nthen\n  alter table autopie_ebpdemo.obj_fact_calls add column time_agent_prev_call timestamp;\nend if;\nend\n$$;\nupdate autopie_ebpdemo.obj_fact_calls as t\nset\n    time_agent_next_call = m.time_agent_next_call,\n    time_agent_prev_call = m.time_agent_prev_call,\n    autopie_run_id = 1\nfrom autopie_ebpdemo.tmp_alter_staging_0000000000 m \nwhere t.row_id = m.row_id;\n\ndrop table autopie_ebpdemo.tmp_alter_staging_0000000000;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase2_window_next_agent"], "unique_id": "model.demo_autopie.phase2_window_next_agent", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase2_window_next_agent.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase2_window_next_agent.sql", "name": "phase2_window_next_agent", "alias": "phase2_window_next_agent", "checksum": {"name": "sha256", "checksum": "f34b1a65399d8ca483c7993a8b5c6503f34054aa52f997aa2a77f9141e58cb20"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348165.6611688}, "model.demo_autopie.phase2_join_outc_to_calls": {"raw_sql": "", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase2_join_outc_to_calls"], "unique_id": "model.demo_autopie.phase2_join_outc_to_calls", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase2_join_outc_to_calls.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase2_join_outc_to_calls.sql", "name": "phase2_join_outc_to_calls", "alias": "phase2_join_outc_to_calls", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348166.843582}, "model.demo_autopie.phase2_join_disp_to_calls": {"raw_sql": "drop table if exists autopie_ebpdemo.tmp_target_affected_0000000000;\ncreate table autopie_ebpdemo.tmp_target_affected_0000000000 as\n(\n    select t.row_id\n    from autopie_ebpdemo.obj_fact_calls t\n    where exists\n    ( \n        select 1\n        from autopie_ebpdemo.obj_fact_dispositions s\n        where s.autopie_run_id = 1\n        and s.agent_id = t.agent_id\n        and s.customer_id = t.customer_id\n        and date(s.time_disposition_made) = date(t.time_call_start)\n        and s.time_disposition_made >= t.time_call_start - interval '120 second'\n        and s.time_disposition_made <= t.time_call_end + interval '120 second'\n    )\n);\n\nalter table autopie_ebpdemo.tmp_target_affected_0000000000 add primary key (row_id);\n\ndrop table if exists autopie_ebpdemo.tmp_pre_join_0000000000;\ncreate table autopie_ebpdemo.tmp_pre_join_0000000000 as\n(\n    with compute_preference_scoring as\n    (\n        -- for each source scan potential targets, pick one by preference\n        select  s.row_id s_row_id, t.row_id t_row_id,\n                -- scores, bigger is more preferred\n                case when s.time_disposition_made between t.time_call_start and t.time_call_end then 1 else 0 end as pref_score_1,\n                extract(epoch from greatest(s.time_disposition_made - t.time_call_end, t.time_call_start - s.time_disposition_made))::int as pref_score_2,\n                -- attributes to be propagated\n                s.flg_k_disp_made,\n                s.flg_m_disp_made,\n                s.flg_a_disp_made,\n                s.time_disposition_made\n        from autopie_ebpdemo.obj_fact_calls t\n        join autopie_ebpdemo.tmp_target_affected_0000000000 a\n        on t.row_id = a.row_id\n        join autopie_ebpdemo.obj_fact_dispositions s \n        on 1=1\n        and s.agent_id = t.agent_id\n        and s.customer_id = t.customer_id\n        and date(s.time_disposition_made) = date(t.time_call_start)\n        and s.time_disposition_made >= t.time_call_start - interval '120 second'\n        and s.time_disposition_made <= t.time_call_end + interval '120 second'    \n    ),\n    pick_best_target as\n    (\n        select  s_row_id,\n                -- collapse source expressions arbitrarily\n                max(flg_k_disp_made) as flg_k_disp_made,\n                max(flg_m_disp_made) as flg_m_disp_made,\n                max(flg_a_disp_made) as flg_a_disp_made,\n                max(time_disposition_made) as time_disposition_made, \n                max(pref_score_1) as pref_score_1, \n                max(pref_score_2) as pref_score_2,\n                -- prefer best targets id\n                (array_agg(t_row_id order by  pref_score_1 desc, pref_score_2 desc))[1] t_row_id\n        from compute_preference_scoring\n        group by s_row_id\n    ),\n    target_collapse as\n    (\n\t\tselect  t_row_id\n\t\t\t\t, max(flg_k_disp_made) as flg_k_disp_made\n\t\t\t\t, max(flg_m_disp_made) as flg_m_disp_made\n\t\t\t\t, max(flg_a_disp_made) as flg_a_disp_made\n\t\t\t\t, min(time_disposition_made) as time_first_disposition_made\n\t\t\t\t, max(time_disposition_made) as time_last_disposition_made\n\t\tfrom pick_best_target\n\t\tgroup by t_row_id       \n    )\n    select * from target_collapse\n);\n\nalter table autopie_ebpdemo.tmp_pre_join_0000000000 add primary key (t_row_id);\n\n-- this should be done only once if new slot is missing\n\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.columns \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n    and column_name = 'flg_k_disp_made'\n)\nthen\n    alter table autopie_ebpdemo.obj_fact_calls add column flg_k_disp_made bigint;\nend if;\nend\n$$;\n\n\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.columns \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n    and column_name = 'flg_m_disp_made'\n)\nthen\n    alter table autopie_ebpdemo.obj_fact_calls add column flg_m_disp_made bigint;\nend if;\nend\n$$;\n\n\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.columns \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n    and column_name = 'flg_a_disp_made'\n)\nthen\n    alter table autopie_ebpdemo.obj_fact_calls add column flg_a_disp_made bigint;\nend if;\nend\n$$;\n\n\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.columns \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n    and column_name = 'time_first_disposition_made'\n)\nthen\n    alter table autopie_ebpdemo.obj_fact_calls add column time_first_disposition_made timestamp;\nend if;\nend\n$$;\n\n\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.columns \n    where table_schema||'.'|| table_name = 'autopie_ebpdemo.obj_fact_calls'\n    and column_name = 'time_last_disposition_made'\n)\nthen\n    alter table autopie_ebpdemo.obj_fact_calls add column time_last_disposition_made timestamp;\nend if;\nend\n$$;\n\n\n\nupdate autopie_ebpdemo.obj_fact_calls as t\nset\n    flg_k_disp_made = m.flg_k_disp_made,\n    flg_m_disp_made = m.flg_m_disp_made,\n    flg_a_disp_made = m.flg_a_disp_made,\n    time_first_disposition_made = m.time_first_disposition_made,\n    time_last_disposition_made = m.time_last_disposition_made, \n    autopie_run_id = 1\nfrom autopie_ebpdemo.tmp_pre_join_0000000000 m \nwhere t.row_id = m.t_row_id;\n\ndrop table if exists autopie_ebpdemo.tmp_pre_join_0000000000;\ndrop table if exists autopie_ebpdemo.tmp_target_affected_0000000000;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "demo_autopie": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "testsatmap", "fqn": ["demo_autopie", "demo_ebp_flow", "prepared_scripts", "phase2_join_disp_to_calls"], "unique_id": "model.demo_autopie.phase2_join_disp_to_calls", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "demo_ebp_flow/prepared_scripts/phase2_join_disp_to_calls.sql", "original_file_path": "models/demo_ebp_flow/prepared_scripts/phase2_join_disp_to_calls.sql", "name": "phase2_join_disp_to_calls", "alias": "phase2_join_disp_to_calls", "checksum": {"name": "sha256", "checksum": "21c8a54aefae03a3834ce6a4b8219d9db6a69c8271742bdf70a825057b2ae8d9"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"demo_autopie": null}, "created_at": 1645348166.849182}}, "sources": {}, "macros": {"macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.809098}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8097348}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8148322}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.815317}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.815628}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8159392}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8163981}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8167622}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.816929}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.817269}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.817652}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.817726}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.817895}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.818002}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8189042}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.81933}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.819552}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.820142}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8209028}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.822036}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.822228}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.822366}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.822502}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.822637}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.82304}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.823338}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.823647}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.824127}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.824388}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.827567}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.82773}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.827942}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.828083}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8281758}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.828958}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.82912}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8292859}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.830266}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.832093}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.835146}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8354309}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.835595}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.835679}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8358772}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8367329}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.836921}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8371682}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.837593}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8433}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8453288}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.845818}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.846118}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.846524}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.846897}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.847728}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.848264}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.848871}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.85151}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.852652}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.852886}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8533099}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8535712}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.854192}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8548648}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.859647}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.86415}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8653598}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8665442}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8672588}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.870852}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.871318}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8715038}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8717031}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8721018}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.875562}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.875913}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.87613}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.877332}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.877732}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8778932}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.878073}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.878326}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8810759}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.884841}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8857338}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.885966}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8864372}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.886584}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8867068}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.886863}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.886977}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.887449}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.887687}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.888887}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8893209}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.88955}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8900979}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.890351}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8906329}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8910651}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.89131}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.891701}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.891943}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.892236}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8928409}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.893951}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.894521}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.894811}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8964748}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.897717}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.898459}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8986912}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.899106}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.899283}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.8994439}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.899621}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.900104}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.900239}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.900398}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9007921}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.902313}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.902617}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9027982}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.903005}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.903188}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.90334}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.903542}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.903819}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9040651}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9046762}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.904907}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.905094}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.905581}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9057238}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.905948}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9063702}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.907048}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9072142}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.907413}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9075751}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.907841}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.908315}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.909676}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.90993}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.910114}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.910261}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.910437}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.910672}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9108758}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.911228}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.911406}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.911565}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.913217}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9133718}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9136791}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.913861}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9141939}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.91442}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.915016}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9152699}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.916037}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9165819}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.91681}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.917096}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645337037.9173691}, "macro.demo_autopie.compile_recipe_chop_rollup": {"unique_id": "macro.demo_autopie.compile_recipe_chop_rollup", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/compile_recipes/compile_recipe_chop_rollup.sql", "original_file_path": "macros/compile_recipes/compile_recipe_chop_rollup.sql", "name": "compile_recipe_chop_rollup", "macro_sql": "{% macro compile_recipe_chop_rollup(autopie_prefix, ingredients, target_fact) %}\n\n{% set run_object_id = range(10000, 99999) | random ~ range(10000, 99999) | random -%}\n{% if env_var('DETERMINISTIC_RUN_ID', 'FALSE') == 'TRUE' %}{% set run_object_id = '0000000000' %}{% endif -%}\n\n{% set autopie_run_id = env_var('AUTOPIE_RUN_ID', '0') -%}\n\n{% set sql -%}\ndrop table if exists {{autopie_prefix}}tmp_target_affected_{{run_object_id}};\n\ncreate table {{autopie_prefix}}tmp_target_affected_{{run_object_id}} as\n(\n  select s.row_id\n  from {{autopie_prefix}}obj_fact_{{ingredients['source_fact']}} s\n  where ({{ingredients['entity']}}, {{ingredients['date_expression']}}{{\", \"~ingredients['expire_expression'] if ingredients['expire_expression']|length>0 else \"\"}}) in\n  (\n    select distinct {{ingredients['entity']}}, {{ingredients['date_expression']}}{{\", \"~ingredients['expire_expression'] if ingredients['expire_expression']|length>0 else \"\"}} date_call\n    from {{autopie_prefix}}obj_fact_{{ingredients['source_fact']}} s\n    where s.autopie_run_id = {{autopie_run_id}}\n  )\n);\n\nalter table {{autopie_prefix}}tmp_target_affected_{{run_object_id}} add primary key (row_id);\n\ndrop table if exists {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}};\n\ncreate table {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}} as\n(\n    with rollup_1 as\n    (\n        select {{ingredients['entity']}}, {{ingredients['date_expression']}} as {{ingredients['date_alias']}}, {{ingredients['expire_expression']~\" as \"~ingredients['expire_alias']~\",\" if ingredients['expire_expression']|length>0 else \"\"}}\n               {%- for exp in ingredients['aggregations'] %}\n               {{exp['expression']}} as {{exp['alias']}}{{ \", \" if not loop.last else \"\" }}\n               {%- endfor %}\n        from {{autopie_prefix}}obj_fact_{{ingredients['source_fact']}} s\n        join {{autopie_prefix}}tmp_target_affected_{{run_object_id}} a\n        on a.row_id = s.row_id\n        group by {{ingredients['entity']}}, {{ingredients['date_expression']}}{{\", \"~ingredients['expire_expression']~\",\" if ingredients['expire_expression']|length>0 else \"\"}}\n        {% if ingredients['having_filter'] | length > 0 -%}\n        having 1=1\n        {%- for exp in ingredients['having_filter'] %}\n        and {{exp['filter_expression']}}\n        {%- endfor %}\n        {% endif -%}\n    ),\n    {% if ingredients['expression_extract'] | length > 0 -%}\n    expression_extract_2 as\n    (\n        select t.*\n               {% for expression_block in ingredients['expression_extract']['expression_list'] -%}\n               ,({{expression_block['expression']}}){{ \"::\"~expression_block['data_type'] if expression_block['data_type']|length>0 else \"\" }}{{ \" as \"~expression_block['alias'] if expression_block['alias']|length>0 else \" as \"~expression_block['expression'] }}\n               {% endfor -%}\n        from rollup_1 t\n        where 1=1\n    ),\n    {% else -%}\n    expression_extract_2 as\n    (\n        select * from rollup_1\n    ),\n    {% endif -%}\n    {% if ingredients['filter'] | length > 0 -%}\n    filter_3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from uexpression_extract_2\n        where 1=1\n        {%- for exp in ingredients['filter']['conjunctions'] %}\n        and {{exp['filter_expression']}}\n        {%- endfor %}\n    )\n    {% else -%}\n    filter_3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n    )\n    {% endif -%}\n    select r.*, \n           {{autopie_run_id}} autopie_run_id\n    from filter_3 r\n);\n\nalter table {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}} add primary key ({{ingredients['entity']}}, {{ingredients['date_alias']}}{{\", \"~ingredients['expire_alias'] if ingredients['expire_expression']|length>0 else \"\"}});\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = '{{autopie_prefix}}obj_fact_{{target_fact['id']}}'\n)\nthen\n  create table {{autopie_prefix}}obj_fact_{{target_fact['id']}} as (select * from {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}} where 1=0);\n  alter  table {{autopie_prefix}}obj_fact_{{target_fact['id']}} add column row_id bigserial not null;\n  alter  table {{autopie_prefix}}obj_fact_{{target_fact['id']}} add primary key ({{ingredients['entity']}}, {{ingredients['date_alias']}}{{\", \"~ingredients['expire_alias'] if ingredients['expire_expression']|length>0 else \"\"}});\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from {{autopie_prefix}}obj_fact_{{target_fact['id']}} where ({{ingredients['entity']}}, {{ingredients['date_alias']}}{{\", \"~ingredients['expire_alias'] if ingredients['expire_expression']|length>0 else \"\"}}) in (select {{ingredients['entity']}}, {{ingredients['date_alias']}}{{\", \"~ingredients['expire_alias'] if ingredients['expire_expression']|length>0 else \"\"}} from {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}});\ninsert into {{autopie_prefix}}obj_fact_{{target_fact['id']}} select * from {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}};\n\ndrop table {{autopie_prefix}}tmp_pre_rollup_{{run_object_id}};\ndrop table {{autopie_prefix}}tmp_target_affected_{{run_object_id}};\n\n{%- endset %}\n\n{# /* return the SQL back to caller */ #}\n{{sql}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645338658.375544}, "macro.demo_autopie.compile_recipe_collect_fact": {"unique_id": "macro.demo_autopie.compile_recipe_collect_fact", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/compile_recipes/compile_recipe_collect_fact.sql", "original_file_path": "macros/compile_recipes/compile_recipe_collect_fact.sql", "name": "compile_recipe_collect_fact", "macro_sql": "{% macro compile_recipe_collect_fact(autopie_prefix, ingredients, target_fact) %}\n{% set params = namespace(aggregations=[], expressions=[]) -%}\n{% set run_object_id = range(10000, 99999) | random ~ range(10000, 99999) | random -%}\n{% if env_var('DETERMINISTIC_RUN_ID', 'FALSE') == 'TRUE' %}{% set run_object_id = '0000000000' %}{% endif -%}\n\n{% set autopie_run_id = env_var('AUTOPIE_RUN_ID', '0') -%}\n{% set autopie_run_start_date = env_var('AUTOPIE_RUN_START_DATE', '1900-01-01') -%}\n{% set autopie_run_end_date = env_var('AUTOPIE_RUN_END_DATE', '2100-01-01') -%}\n\n{% set obtain_types -%}\nselect '\"'||column_name||'\"::'||\n       case when replace(udt_name, '_','') = 'bit' then 'int'\n            when replace(udt_name, '_','') like 'int8%' then 'bigint'\n            when replace(udt_name, '_','') like 'int4%' then 'int'\n            when replace(udt_name, '_','') like 'int%' then 'smallint'\n            when replace(udt_name, '_','') like 'bool%' then 'int'\n            when replace(udt_name, '_','') like 'float%' then 'numeric'\n            when replace(udt_name, '_','') like 'float%' then 'numeric'\n            when replace(udt_name, '_','') like 'byte%' then 'text'\n            when replace(udt_name, '_','') like 'varchar%' then 'text'\n            when replace(udt_name, '_','') like 'timestamp%' then 'timestamp'\n            else replace(udt_name, '_','') end ||\n       ' as \"'||column_name||'\"' select_text\nfrom information_schema.columns \nwhere table_schema||'.'||table_name = '{{ingredients['expression_extract']['source_raw']}}'\norder by ordinal_position ;\n{% endset -%}\n\n{% set pre_extract_sql -%}\n{% set data_type = run_query(obtain_types) -%}\ncreate or replace view {{autopie_prefix}}tmp_staging_view_source_extract_0_{{run_object_id}} as\nselect {% for dstring in data_type.rows -%}\n       {{dstring['select_text']}}{{ \", \" if not loop.last else \"\" }}\n       {% endfor -%} \nfrom {{ingredients['expression_extract']['source_raw']}};\n{% endset -%}\n\n{% do run_query(pre_extract_sql) -%}\n\n{% set pre_view_sql -%}\ncreate or replace view {{autopie_prefix}}tmp_staging_view_expression_extract_1_{{run_object_id}} as\nselect  {% for exp in ingredients['expression_extract']['expression_list'] -%}\n        {% do run_query(\"drop view if exists \"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\" cascade\") -%}\n        {% do run_query(\"create or replace view \"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\" as select \"~exp['expression']~\" exp from \"~autopie_prefix~\"tmp_staging_view_source_extract_0_\"~run_object_id~\" limit 1\") -%}\n        {% set data_type = run_query(\"select replace(udt_name, '_','') dt from information_schema.columns where table_schema||'.'||table_name = '\"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\"' and column_name = 'exp'\") -%}\n        {% do params.expressions.append(exp['alias']) -%}\n        ({{exp['expression']}})::{{data_type.rows[0]['dt']}} as {{exp['alias']}}{{ \", \" if not loop.last else \"\" }}\n        {% do run_query(\"drop view if exists \"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\" cascade\") -%}\n        {% endfor -%} \nfrom {{autopie_prefix}}tmp_staging_view_source_extract_0_{{run_object_id}};\n{% endset -%}\n\n{% do run_query(pre_view_sql) -%}\n\n{% set clean_intermediate -%}\ndrop view if exists {{autopie_prefix}}tmp_staging_view_source_extract_0_{{run_object_id}} cascade;\ndrop view if exists {{autopie_prefix}}tmp_staging_view_expression_extract_1_{{run_object_id}} cascade;\n{% endset -%}\n\n{% set sql -%}\n{{pre_extract_sql}}\n\n{{pre_view_sql}}\n\ndrop table if exists {{autopie_prefix}}tmp_staging_fact_{{run_object_id}};\ncreate table {{autopie_prefix}}tmp_staging_fact_{{run_object_id}} as\n(\n    with expression_extract_1 as\n    (\n        select * from {{autopie_prefix}}tmp_staging_view_expression_extract_1_{{run_object_id}}\n    ),\n    {% if ingredients['expression_extract_outer'] | length > 0 -%}\n    expression_extract_2 as\n    (\n        select  t.*,\n                {% for exp in ingredients['expression_extract_outer']['expression_list'] -%}\n                {% do run_query(\"drop view if exists \"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\" cascade\") -%}\n                {% do run_query(\"create or replace view \"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\" as select \"~exp['expression']~\" exp from \"~autopie_prefix~\"tmp_staging_view_expression_extract_1_\"~run_object_id~\" limit 1\") -%}\n                {% set data_type = run_query(\"select replace(udt_name, '_','') dt from information_schema.columns where table_schema||'.'||table_name = '\"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\"' and column_name = 'exp'\") -%}\n                {% do params.expressions.append(exp['alias']) -%}\n                ({{exp['expression']}})::{{data_type.rows[0]['dt']}} as {{exp['alias']}}{{ \", \" if not loop.last else \"\" }}\n                {% do run_query(\"drop view if exists \"~autopie_prefix~\"tmp_exp_type_\"~run_object_id~\" cascade\") -%}\n                {% endfor -%}\n        from expression_extract_1 t\n    ),\n    {% else -%}\n    expression_extract_2 as\n    (\n        select * from expression_extract_1\n    ),\n    {% endif -%}\n    {% if ingredients['filter_conjunctions'] | length > 0 -%}\n    filter__3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n        where 1=1\n        {%- for exp in ingredients['filter_conjunctions'] %}\n        and {{exp}}\n        {%- endfor %}\n    ),\n    {% else -%}\n    filter__3 as\n    (\n        select /* filtering irrelevant records out */ *\n        from expression_extract_2\n    ),\n    {% endif -%}\n    {% if ingredients['incremental_update_on'] | length > 0 -%}\n    incremental_extract__4 as\n    (\n        select /* retrieving incremental data - by date range only */ *\n        from filter__3\n        where {{ingredients['incremental_update_on']}} >= to_date('{{autopie_run_start_date}}', 'YYYY-MM-DD')\n          and {{ingredients['incremental_update_on']}}  < to_date('{{autopie_run_end_date}}', 'YYYY-MM-DD')\n    ),\n    {% else -%}\n    incremental_extract__4 as\n    (\n        select /* retrieving incremental data - by date range only */ *\n        from filter__3\n    ),\n    {% endif -%}\n    {% if ingredients['deduplication'] | length > 0 -%}\n    deduplication__5 as\n    (\n        select /* deduplicate by strategy */\n               {{ingredients['deduplication']['grouping_key']}}\n               {%- for exp in params.expressions %}\n               {%- if exp not in ingredients['deduplication']['grouping_key'].split(',')|string %}\n               {%- do params.aggregations.append(exp)%}\n               {%- endif -%}\n               {%- endfor %}\n               {%- for exp in params.aggregations %}\n               {%- if ingredients['deduplication']['preference']|lower == 'arbitrary' %}\n               , max({{exp}}) as {{exp}}\n               {%- else %}\n               , (array_agg({{exp}} order by {{ingredients['deduplication']['preference']}}))[1] as {{exp}}\n               {%- endif -%}\n               {%- endfor %}\n        from incremental_extract__4\n        group by {{ingredients['deduplication']['grouping_key']}} \n    ),\n    {% else -%}\n    deduplication__5 as\n    (\n        select * from incremental_extract__4\n    ),\n    {% endif -%}\n    {% if ingredients['coarsening'] | length > 0 -%}\n    coarsening_6 as\n    (\n        select /* flatten all dimensions, fit into EAVT format */\n              {{ingredients['coarsening']['entity_and_dims']}}\n              {{\", \"~ingredients['coarsening']['date_expression'] if ingredients['coarsening']['date_expression']|length>0 else \"\"}}{{\" as \"~ingredients['coarsening']['date_alias'] if ingredients['coarsening']['date_alias']|length>0 else \"\"}}\n              {{\", \"~ingredients['coarsening']['expire_expression'] if ingredients['coarsening']['expire_expression']|length>0 else \"\"}}{{\" as \"~ingredients['coarsening']['expire_alias'] if ingredients['coarsening']['expire_alias']|length>0 else \"\"}}\n              {% if ingredients['coarsening']['aggregations'] == 'arbitrary' -%}\n              {% for exp in params.expressions -%}\n              {% if exp != ingredients['coarsening']['entity_and_dims'] and exp!=ingredients['coarsening']['date_expression'] and exp!=ingredients['coarsening']['expire_expression'] and exp|length > 1 and exp not in ingredients['coarsening']['entity_and_dims'].split(',')|string -%}\n              , max({{exp}}) as {{exp}}\n              {% endif -%}\n              {% endfor -%}\n              {% else -%}\n              {% for exp in ingredients['coarsening']['aggregations'] -%}\n              {% if exp['apply']|length>0 -%}\n              {% if exp['apply']=='arbitrary' -%}\n              {% for inner_exp in exp['column_list'] -%}\n              , max({{inner_exp}}) as {{inner_exp}}\n              {% endfor -%}\n              {% elif exp['apply']=='unpivot' -%}\n              {% for inner_exp in exp['val_list'] -%}\n              , max(case when {{exp['cat_column']}}='{{inner_exp}}' then 1 else 0 end) as {{exp['alias_prefix']}}{{inner_exp.lower().replace(' ', '_').replace('-', '_').replace('.', '_').replace('/', '_').replace('+', '_').replace('!', '_').replace('@', '_').replace('#', '_').replace('$', '_').replace('%', '_').replace('^', '_').replace('&', '_').replace('*', '_').replace('(', '_').replace(')', '_').replace('<', '_').replace('>', '_').replace('?', '_').replace(':', '_').replace(';', '_').replace('{', '_').replace('}', '_').replace('[', '_').replace(']', '_').replace('|', '_').replace('\\\\', '_').replace('\"', '_').replace(\"'\", '_').replace('`', '_').replace('~', '_').replace('=', '_')}}\n              {% endfor -%}\n              {% else -%}\n              -- not supported expression {{exp}}\n              {% endif -%}\n              {% else -%}\n              , {{exp['expression']}} as {{exp['alias']}}\n              {% endif -%}\n              {% endfor -%}\n              {% endif -%}\n        from deduplication__5\n        group by {{ingredients['coarsening']['entity_and_dims']}}{{\", \"~ingredients['coarsening']['date_expression'] if ingredients['coarsening']['date_expression']|length>0 else \"\"}}{{ \", \"~ingredients['coarsening']['expire_expression'] if ingredients['coarsening']['expire_expression']|length>0 else \"\" }}\n    )\n    {% else -%}\n    coarsening_6 as\n    (\n        select * from deduplication__5\n    )\n    {% endif -%}\n    select  t.*,\n            {{autopie_run_id}} autopie_run_id\n    from coarsening_6 t\n);\n\n{{clean_intermediate}}\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = '{{autopie_prefix}}obj_fact_{{target_fact['id']}}'\n)\nthen\n    create table {{autopie_prefix}}obj_fact_{{target_fact['id']}} as (select * from {{autopie_prefix}}tmp_staging_fact_{{run_object_id}} where 1=0);\n    alter  table {{autopie_prefix}}obj_fact_{{target_fact['id']}} add column row_id bigserial not null;\n    alter  table {{autopie_prefix}}obj_fact_{{target_fact['id']}} add primary key ({{target_fact['entity_and_dims']}}, {{target_fact['date']}}{{\", \"~target_fact['expire'] if target_fact['expire']|length>0 else \"\"}});\n    --\n    create index ixrid_obj_fact_{{target_fact['id']}} on {{autopie_prefix}}obj_fact_{{target_fact['id']}}(row_id);\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from {{autopie_prefix}}obj_fact_{{target_fact['id']}} where ({{target_fact['entity_and_dims']}}, {{target_fact['date']}}{{\", \"~target_fact['expire'] if target_fact['expire']|length>0 else \"\"}}) in (select {{target_fact['entity_and_dims']}}, {{target_fact['date']}}{{\", \"~target_fact['expire'] if target_fact['expire']|length>0 else \"\"}} from {{autopie_prefix}}tmp_staging_fact_{{run_object_id}});\ninsert into {{autopie_prefix}}obj_fact_{{target_fact['id']}} select * from {{autopie_prefix}}tmp_staging_fact_{{run_object_id}};\ndrop table {{autopie_prefix}}tmp_staging_fact_{{run_object_id}};\n\n{%- endset %}\n\n{% do run_query(clean_intermediate) -%}\n\n{# /* return the SQL back to caller */ #}\n{{sql}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645338658.407211}, "macro.demo_autopie.compile_recipe_collect_union": {"unique_id": "macro.demo_autopie.compile_recipe_collect_union", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/compile_recipes/compile_recipe_collect_union.sql", "original_file_path": "macros/compile_recipes/compile_recipe_collect_union.sql", "name": "compile_recipe_collect_union", "macro_sql": "{% macro compile_recipe_collect_union(autopie_prefix, ingredients, target_fact) %}\n\n{% set run_object_id = range(10000, 99999) | random ~ range(10000, 99999) | random -%}\n{% set params = namespace(aggregations=[], alias=\"\") -%}\n{% if env_var('DETERMINISTIC_RUN_ID', 'FALSE') == 'TRUE' %}{% set run_object_id = '0000000000' %}{% endif -%}\n\n{% set autopie_run_id = env_var('AUTOPIE_RUN_ID', '0') -%}\n\n{% set sql -%}\ndrop table if exists {{autopie_prefix}}tmp_staging_fact_{{run_object_id}};\ncreate table {{autopie_prefix}}tmp_staging_fact_{{run_object_id}} as\n(\n    with\n    {% for union_block in ingredients['nested_union_all_list'] -%}\n    union_block_{{loop.index}} as\n    (\n        select\n        {% for expression_block in union_block['expression_list'] -%}\n        ({{expression_block['expression']}}){{ \"::\"~expression_block['data_type'] if expression_block['data_type']|length>0 else \"\" }}{{ \" as \"~expression_block['alias'] if expression_block['alias']|length>0 else \" as \"~expression_block['expression'] }}{{ \",\" if not loop.last else \"\" }}\n        {% endfor -%}\n        from {{autopie_prefix}}obj_fact_{{union_block['source_fact']}} s\n        where s.autopie_run_id = {{autopie_run_id}}\n    ),\n    {% endfor -%}\n    unifier__{{run_object_id}} as\n    (\n        {% for union_block in ingredients['nested_union_all_list'] -%}\n        select * from union_block_{{loop.index}}{{ \" union all\" if not loop.last else \"\" }}\n        {% endfor %}\n    ),\n    {% if ingredients['filter'] | length > 0 -%}\n    filter__{{run_object_id}} as\n    (\n        select /* filtering irrelevant records out */ *\n        from unifier__{{run_object_id}}\n        where 1=1\n        {%- for exp in ingredients['filter']['conjunctions'] %}\n        and {{exp['filter_expression']}}\n        {%- endfor %}\n    ),\n    {% else -%}\n    filter__{{run_object_id}} as\n    (\n        select /* filtering irrelevant records out */ *\n        from unifier__{{run_object_id}}\n    ),\n    {% endif -%}\n    {% if ingredients['deduplicate'] | length > 0 -%}\n    deduplicate__{{run_object_id}} as\n    (\n        select /* deduplicate by strategy */\n           {{ingredients['deduplicate']['grouping_key']}}\n           {% for exp in ingredients['nested_union_all_list'][0]['expression_list'] -%}\n           {% set params.alias = exp['alias'] if exp['alias']|length>0 else exp['expression']  -%}\n           {%- if params.alias not in ingredients['deduplicate']['grouping_key'].split(',')|string %}\n           {%- do params.aggregations.append(params.alias)%}\n           {%- endif -%}\n           {%- endfor %}\n           {%- for exp in params.aggregations %}\n           {%- if ingredients['deduplicate']['preference']|lower == 'arbitrary' %}\n           , max({{exp}}) as {{exp}}\n           {%- else %}\n           , (array_agg({{exp}} order by {{ingredients['deduplicate']['preference']}}))[1] as {{exp}}\n           {%- endif -%}\n           {%- endfor %}\n    from filter__{{run_object_id}}\n    group by {{ingredients['deduplicate']['grouping_key']}}\n    )\n    {% else -%}\n    deduplicate__{{run_object_id}} as\n    (\n        select /* filtering irrelevant records out */ *\n        from filter__{{run_object_id}}\n    )\n    {% endif -%}\n    select {{autopie_run_id}} autopie_run_id,\n           t.* from deduplicate__{{run_object_id}} t\n);\n\n-- check if not exists already, this should run once\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.tables \n    where table_schema||'.'|| table_name = '{{autopie_prefix}}obj_fact_{{target_fact['id']}}'\n)\nthen\n    create table {{autopie_prefix}}obj_fact_{{target_fact['id']}} as (select * from {{autopie_prefix}}tmp_staging_fact_{{run_object_id}} where 1=0);\n    alter  table {{autopie_prefix}}obj_fact_{{target_fact['id']}} add column row_id bigserial not null;\n    alter  table {{autopie_prefix}}obj_fact_{{target_fact['id']}} add primary key ({{target_fact['entity']}}, {{target_fact['date']}}{{ \", \"~target_fact['expire'] if target_fact['expire']|length>0 else \"\" }});\n    --\n    create index ixrid_obj_fact_{{target_fact['id']}} on {{autopie_prefix}}obj_fact_{{target_fact['id']}}(row_id);\nend if;\nend\n$$;\n\n-- upsert staging additions into the permanent fact object\ndelete from {{autopie_prefix}}obj_fact_{{target_fact['id']}} where ({{target_fact['entity']}}, {{target_fact['date']}}{{ \", \"~target_fact['expire'] if target_fact['expire']|length>0 else \"\" }}) in (select {{target_fact['entity']}}, {{target_fact['date']}}{{ \", \"~target_fact['expire'] if target_fact['expire']|length>0 else \"\" }} from {{autopie_prefix}}tmp_staging_fact_{{run_object_id}});\ninsert into {{autopie_prefix}}obj_fact_{{target_fact['id']}} select * from {{autopie_prefix}}tmp_staging_fact_{{run_object_id}};\ndrop table {{autopie_prefix}}tmp_staging_fact_{{run_object_id}};\n\n{%- endset %}\n\n{# /* return the SQL back to caller */ #}\n{{sql}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645338658.416973}, "macro.demo_autopie.compile_recipe_blend_window": {"unique_id": "macro.demo_autopie.compile_recipe_blend_window", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/compile_recipes/compile_recipe_blend_window.sql", "original_file_path": "macros/compile_recipes/compile_recipe_blend_window.sql", "name": "compile_recipe_blend_window", "macro_sql": "{% macro compile_recipe_blend_window(autopie_prefix, ingredients, target_fact) %}\n\n{% set run_object_id = range(10000, 99999) | random ~ range(10000, 99999) | random -%}\n{% if env_var('DETERMINISTIC_RUN_ID', 'FALSE') == 'TRUE' %}{% set run_object_id = '0000000000' %}{% endif -%}\n\n{% set autopie_run_id = env_var('AUTOPIE_RUN_ID', '0') -%}\n\n{% set sql -%}\ndrop table if exists {{autopie_prefix}}tmp_alter_staging_{{run_object_id}};\ncreate table {{autopie_prefix}}tmp_alter_staging_{{run_object_id}} as\n(\n  select  row_id,\n          /* calculate window functions on whole fact table - TODO, will optimize this */\n          {%- for exp in ingredients['window_expression_list'] %}\n          {% if exp['ifnull'] | length > 0 -%}\n          coalesce({{exp['expression']}}, {{exp['ifnull']}}) as {{exp['alias']}}{{ \", \" if not loop.last else \"\" }}\n          {%- else -%}\n          {{exp['expression']}} as {{exp['alias']}}{{ \", \" if not loop.last else \"\" }}\n          {%- endif -%}\n          {%- endfor %}\n  from {{autopie_prefix}}obj_fact_{{target_fact}}\n);\n\nalter table {{autopie_prefix}}tmp_alter_staging_{{run_object_id}} add primary key (row_id);\n\n-- check if not exists already, this should run once\n{%- for exp in ingredients['window_expression_list'] %}\ndo $$                  \nbegin\nif not exists\n( \n  select 1 from information_schema.columns \n  where table_schema||'.'|| table_name = '{{autopie_prefix}}obj_fact_{{target_fact}}'\n  and column_name = '{{exp['alias']}}'\n)\nthen\n  alter table {{autopie_prefix}}obj_fact_{{target_fact}} add column {{exp['alias']}} {{exp['data_type']}};\nend if;\nend\n$$;\n\n{%- endfor %}\nupdate {{autopie_prefix}}obj_fact_{{target_fact}} as t\nset \n    {%- for exp in ingredients['window_expression_list'] %}\n    {{exp['alias']}} = m.{{exp['alias']}},\n    {%- endfor %}\n    autopie_run_id = {{autopie_run_id}}\nfrom {{autopie_prefix}}tmp_alter_staging_{{run_object_id}} m \nwhere t.row_id = m.row_id;\n\ndrop table {{autopie_prefix}}tmp_alter_staging_{{run_object_id}};\n{%- endset %}\n\n{# /* return the SQL back to caller */ #}\n{{sql}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645338658.419968}, "macro.demo_autopie.run_recipe": {"unique_id": "macro.demo_autopie.run_recipe", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/core/run_recipe.sql", "original_file_path": "macros/core/run_recipe.sql", "name": "run_recipe", "macro_sql": "{% macro run_recipe(autopie_prefix, recipe_type, ingredients, target_fact, source_fact) %}\n\n{% if not autopie_prefix|length>0%}{% set autopie_prefix = env_var('AUTOPIE_PREFIX', 'autopie.') %}{% endif -%}\n\n{# /* compile the recipe into SQL */ #}\n{% if recipe_type == 'collect_fact' %}{% set compiled_sql = compile_recipe_collect_fact(autopie_prefix, ingredients, target_fact) -%}\n{% elif recipe_type == 'collect_union' %}{% set compiled_sql = compile_recipe_collect_union(autopie_prefix, ingredients, target_fact) -%}\n{% elif recipe_type == 'blend_join' %}{% set compiled_sql = compile_recipe_blend_join(autopie_prefix, ingredients, target_fact, source_fact) -%}\n{% elif recipe_type == 'blend_window' %}{% set compiled_sql = compile_recipe_blend_window(autopie_prefix, ingredients, target_fact) -%}\n{% elif recipe_type == 'chop_rollup' %}{% set compiled_sql = compile_recipe_chop_rollup(autopie_prefix, ingredients, target_fact) -%}\n{% elif recipe_type == 'chop_state' %}{% set compiled_sql = compile_recipe_chop_state(autopie_prefix, ingredients,target_fact, source_fact) -%}\n{% elif recipe_type == 'chop_last' %}{% set compiled_sql = compile_recipe_chop_last(autopie_prefix, ingredients,target_fact, source_fact) -%}\n{% elif recipe_type == 'chop_range' %}{% set compiled_sql = compile_recipe_chop_range(autopie_prefix, ingredients,target_fact, source_fact) -%}\n{% endif -%}\n\n{# /* print sql in debug or info mode */ #}\n{% if env_var('AUTOPIE_RUN_MODE', 'INFO') == 'DEBUG' or env_var('AUTOPIE_RUN_MODE', 'DEBUG') == 'INFO' -%}\n{{ log(compiled_sql, info=True) }}\n{% endif -%}\n\n{# /* run the SQL generated by compiler in DEBUG or RUN mode */ #}\n{% if env_var('AUTOPIE_RUN_MODE', 'INFO') == 'DEBUG' or env_var('AUTOPIE_RUN_MODE', 'DEBUG') == 'RUN' -%}\n{% set results = run_query(compiled_sql) -%}\n{% endif -%}\n\n{# /* do some tests on the objects previous step executed */ #}\n{% set sql %}\n{% if recipe_type in ('collect_union', 'chop_rollup', 'collect_fact') -%}\nselect row_number() over (order by autopie_run_id desc) run_sequence, count(*) count_records \n  from {{autopie_prefix}}obj_fact_{{target_fact['id']}}\ngroup by autopie_run_id\norder by 1 \nlimit 5;\n{% else -%}\nselect row_number() over (order by autopie_run_id desc) run_sequence, count(*) count_records \n  from {{autopie_prefix}}obj_fact_{{target_fact}}\ngroup by autopie_run_id\norder by 1\nlimit 5;\n{% endif -%}\n{% endset %}\n\n{% if env_var('AUTOPIE_RUN_MODE', 'INFO') != 'INFO' %}\n{% set results = run_query(sql) %}\n{# do results.print_table() #}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.demo_autopie.compile_recipe_collect_fact", "macro.demo_autopie.compile_recipe_collect_union", "macro.demo_autopie.compile_recipe_blend_window", "macro.demo_autopie.compile_recipe_chop_rollup", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645338658.4227939}, "macro.demo_autopie.run_directory": {"unique_id": "macro.demo_autopie.run_directory", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/core/run_directory.sql", "original_file_path": "macros/core/run_directory.sql", "name": "run_directory", "macro_sql": "{% macro run_directory() %}\n\n{% set autopie_prefix =  env_var('AUTOPIE_PREFIX', 'autopie.') %}\n\n{% set obtain_params %}\nwith read_directory as (select * from (select * from pg_ls_dir('./autopie_workdir') pg) iq where pg like '%.json'),\nfile_content as (select pg file_name, cast(pg_read_file(E'./autopie_workdir/'||pg, 0, 100000000) as json) json_content from read_directory)\nselect file_name, \n       json_content->>'recipe_type' recipe_type,\n       json_content->>'ingredients' ingredients,\n       json_content->>'target_fact' target_fact,\n       json_content->>'source_fact' source_fact\n  from file_content\norder by file_name;\n{% endset %}\n\n{% set params_list = run_query(obtain_params) -%}\n\n{% for param_row in params_list.rows %}\n{{ log(\"\\n--RUNNING FILE ---> \"~param_row['file_name'], info=True) }}\n{% set target_fact = \"\" if param_row['target_fact'] == None else param_row['target_fact'] %}\n{% set target_fact = target_fact if fromjson(target_fact) == None else fromjson(target_fact) %}\n{% set recipe_output = run_recipe(autopie_prefix, param_row['recipe_type'], fromjson(param_row['ingredients']), target_fact, param_row['source_fact']) -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.demo_autopie.run_recipe"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645338658.42399}, "macro.demo_autopie.compile_recipe_blend_join": {"unique_id": "macro.demo_autopie.compile_recipe_blend_join", "package_name": "demo_autopie", "root_path": "/Users/hassanzaheer/Desktop/Projects/demo_autopie", "path": "macros/compile_recipes/compile_recipe_blend_join.sql", "original_file_path": "macros/compile_recipes/compile_recipe_blend_join.sql", "name": "compile_recipe_blend_join", "macro_sql": "{% macro compile_recipe_blend_join(autopie_prefix, ingredients, target_fact, source_fact) %}\n\n{% set run_object_id = range(10000, 99999) | random ~ range(10000, 99999) | random -%}\n{% if env_var('DETERMINISTIC_RUN_ID', 'FALSE') == 'TRUE' %}{% set run_object_id = '0000000000' %}{% endif -%}\n\n{% set autopie_run_id = env_var('AUTOPIE_RUN_ID', '0') -%}\n\n{% set dtype_setup %}\ndrop view if exists {{autopie_prefix}}tmp_dtype_view_base_{{run_object_id}} cascade;\ncreate or replace view {{autopie_prefix}}tmp_dtype_view_base_{{run_object_id}} as\nselect  -- attributes to be propagated\n        {%- for exp in ingredients['matched_expressions'] %}\n        {{exp['expression']}}{{\" as \"~exp['alias'] if exp['alias']|length>0 else \"\"}}{{ \",\" if not loop.last else \"\" -}}\n        {%- endfor %}\nfrom {{autopie_prefix}}obj_fact_{{target_fact}} t\njoin {{autopie_prefix}}obj_fact_{{source_fact}} s on 1=0;\n\n{%- if ingredients['at_target_choose_sources']|lower == 'collapse' %}\ndrop view if exists {{autopie_prefix}}tmp_dtype_view_collapse_{{run_object_id}} cascade;\ncreate or replace view {{autopie_prefix}}tmp_dtype_view_collapse_{{run_object_id}} as\nselect  {%- for exp in ingredients['target_collapse_aggregations'] %}\n\t\t{{exp['expression']}}{{\" as \"~exp['alias'] if exp['alias']|length>0 else \"\"}}{{ \",\" if not loop.last else \"\" -}}\n\t\t{%- endfor %}\nfrom {{autopie_prefix}}tmp_dtype_view_base_{{run_object_id}}\n{%- endif %}\n{% endset %}\n\n{% set dtype_cleanup %}\ndrop view if exists {{autopie_prefix}}tmp_dtype_view_base_{{run_object_id}} cascade;\ndrop view if exists {{autopie_prefix}}tmp_dtype_view_collapse_{{run_object_id}} cascade;\n{% endset %}\n\n{% set dtype_query %}\nselect column_name alias, \n       case when replace(udt_name, '_','') = 'bit' then 'int'\n            when replace(udt_name, '_','') like 'int8%' then 'bigint'\n            when replace(udt_name, '_','') like 'int4%' then 'int'\n            when replace(udt_name, '_','') like 'int%' then 'smallint'\n            when replace(udt_name, '_','') like 'bool%' then 'int'\n            when replace(udt_name, '_','') like 'float%' then 'numeric'\n            when replace(udt_name, '_','') like 'float%' then 'numeric'\n            when replace(udt_name, '_','') like 'byte%' then 'text'\n            when replace(udt_name, '_','') like 'varchar%' then 'text'\n            when replace(udt_name, '_','') like 'timestamp%' then 'timestamp'\n            else replace(udt_name, '_','') end data_type\nfrom information_schema.columns\nwhere table_schema||'.'||table_name =\n{% endset %}\n\n{% set dtype_query_end_pre %}\n'{{autopie_prefix}}tmp_dtype_view_base_{{run_object_id}}'\norder by ordinal_position;\n{% endset %}\n\n{% set dtype_query_end_agg %}\n{%- if ingredients['at_target_choose_sources']|lower == 'collapse' %}\n'{{autopie_prefix}}tmp_dtype_view_collapse_{{run_object_id}}'\n{%- else %}\n'{{autopie_prefix}}tmp_dtype_view_base_{{run_object_id}}'\n{%- endif %}\norder by ordinal_position;\n{% endset %}\n\n{% do run_query(dtype_setup) -%}\n{% set dtype_obtain_pre = run_query(dtype_query~dtype_query_end_pre) -%}\n{% set dtype_obtain_agg = run_query(dtype_query~dtype_query_end_agg) -%}\n{% do run_query(dtype_cleanup) -%}\n\n{% set sql -%}\ndrop table if exists {{autopie_prefix}}tmp_target_affected_{{run_object_id}};\ncreate table {{autopie_prefix}}tmp_target_affected_{{run_object_id}} as\n(\n    select t.row_id\n    from {{autopie_prefix}}obj_fact_{{target_fact}} t\n    where exists\n    ( \n        select 1\n        from {{autopie_prefix}}obj_fact_{{source_fact}} s\n        where s.autopie_run_id = {{autopie_run_id}}\n        {%- for exp in ingredients['conjunctions'] %}\n        and {{exp}}\n        {%- endfor %}\n    )\n);\n\nalter table {{autopie_prefix}}tmp_target_affected_{{run_object_id}} add primary key (row_id);\n\ndrop table if exists {{autopie_prefix}}tmp_pre_join_{{run_object_id}};\ncreate table {{autopie_prefix}}tmp_pre_join_{{run_object_id}} as\n(\n    with compute_preference_scoring as\n    (\n        -- for each source scan potential targets, pick one by preference\n        select  s.row_id s_row_id, t.row_id t_row_id,\n                -- scores, bigger is more preferred\n                {%- for exp in ingredients['match_preferences'] %}\n                {{exp}} as pref_score_{{loop.index}},\n                {%- endfor %}\n                -- attributes to be propagated\n                {%- for exp in ingredients['matched_expressions'] %}\n                {{exp['expression']}}{{\" as \"~exp['alias'] if exp['alias']|length>0 else \"\"}}{{ \",\" if not loop.last else \"\" -}}\n                {%- endfor %}\n        from {{autopie_prefix}}obj_fact_{{target_fact}} t\n        join {{autopie_prefix}}tmp_target_affected_{{run_object_id}} a\n        on t.row_id = a.row_id\n        join {{autopie_prefix}}obj_fact_{{source_fact}} s \n        on 1=1\n        {%- for exp in ingredients['conjunctions'] %}\n        and {{exp}}\n        {%- endfor %}    \n    ),\n    {%- if ingredients['from_source_to_target_mapping']|lower == 'best' %}\n    pick_best_target as\n    (\n        select  s_row_id,\n                -- collapse source expressions arbitrarily\n                {%- for exp in dtype_obtain_pre.rows  %}\n                max({{exp['alias']}}) as {{exp['alias']}},\n                {%- endfor %}\n                {%- for exp in ingredients['match_preferences'] %} \n                max(pref_score_{{loop.index}}) as pref_score_{{loop.index}},\n                {%- endfor %}\n                -- prefer best targets id\n                (array_agg(t_row_id order by {% for exp in ingredients['match_preferences'] %} pref_score_{{loop.index}} desc{{ \",\" if not loop.last else \"\" -}}{%- endfor %}))[1] t_row_id\n        from compute_preference_scoring\n        group by s_row_id\n    ),\n    {%- else %}\n    pick_best_target as\n    (\n        select * from compute_preference_scoring\n    ),\n    {%- endif -%}\n    {%- if ingredients['at_target_choose_sources']|lower == 'collapse' %}\n    target_collapse as\n    (\n\t\tselect  t_row_id\n\t\t\t\t{%- for exp in ingredients['target_collapse_aggregations'] %}\n\t\t\t\t, {{exp['expression']}}{{\" as \"~exp['alias'] if exp['alias']|length>0 else \"\"}}\n\t\t        {%- endfor %}\n\t\tfrom pick_best_target\n\t\tgroup by t_row_id       \n    )\n    {%- elif ingredients['at_target_choose_sources']|lower == 'collapse_any' %}\n    target_collapse as\n    (\n\t\tselect  t_row_id\n\t\t\t\t{%- for exp in dtype_obtain_pre.rows %}\n\t\t\t\t, max({{exp['alias']}}){{\" as \"~exp['alias'] if exp['alias']|length>0 else \"\"}}\n\t\t        {%- endfor %}\n\t\tfrom pick_best_target\n\t\tgroup by t_row_id       \n    )\n    {%- elif ingredients['at_target_choose_sources']|lower == 'best' %}\n    target_collapse as\n    (\n        select  t_row_id\n\t\t\t\t{%- for exp in dtype_obtain_pre.rows %}\n                , (array_agg({{exp['alias']}} order by {% for exp in ingredients['match_preferences'] %} pref_score_{{loop.index}} desc{{ \",\" if not loop.last else \"\" -}}{%- endfor %}))[1] {{exp['alias']}}\n\t\t        {%- endfor %}\n\t\tfrom pick_best_target\n\t\tgroup by t_row_id    \n    )\n    {%- else %}\n    target_collapse as\n    (\n        select * from pick_best_target\n    )\n    {%- endif %}\n    select * from target_collapse\n);\n\nalter table {{autopie_prefix}}tmp_pre_join_{{run_object_id}} add primary key (t_row_id);\n\n-- this should be done only once if new slot is missing\n{% for exp in dtype_obtain_agg.rows %}\ndo $$                  \nbegin\nif not exists\n( \n    select 1 from information_schema.columns \n    where table_schema||'.'|| table_name = '{{autopie_prefix}}obj_fact_{{target_fact}}'\n    and column_name = '{{exp['alias']}}'\n)\nthen\n    alter table {{autopie_prefix}}obj_fact_{{target_fact}} add column {{exp['alias']}} {{exp['data_type']}};\nend if;\nend\n$$;\n\n{% endfor %}\n\nupdate {{autopie_prefix}}obj_fact_{{target_fact}} as t\nset \n\t{%- for exp in dtype_obtain_agg.rows %}\n    {{exp['alias']}} = m.{{exp['alias']}},\n\t{%- endfor %} \n    autopie_run_id = {{autopie_run_id}}\nfrom {{autopie_prefix}}tmp_pre_join_{{run_object_id}} m \nwhere t.row_id = m.t_row_id;\n\ndrop table if exists {{autopie_prefix}}tmp_pre_join_{{run_object_id}};\ndrop table if exists {{autopie_prefix}}tmp_target_affected_{{run_object_id}};\n{%- endset %}\n\n{# /* return the SQL back to caller */ #}\n{{sql}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645348159.4544399}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.demo_autopie.demo_data_prep": [], "model.demo_autopie.phase1_fact_calls": [], "model.demo_autopie.phase1_fact_outcomes": [], "model.demo_autopie.phase1_fact_crm": [], "model.demo_autopie.phase1_fact_dispositions": [], "model.demo_autopie.phase2_window_next_agent": [], "model.demo_autopie.phase2_join_outc_to_calls": [], "model.demo_autopie.phase2_join_disp_to_calls": []}, "child_map": {"model.demo_autopie.demo_data_prep": [], "model.demo_autopie.phase1_fact_calls": [], "model.demo_autopie.phase1_fact_outcomes": [], "model.demo_autopie.phase1_fact_crm": [], "model.demo_autopie.phase1_fact_dispositions": [], "model.demo_autopie.phase2_window_next_agent": [], "model.demo_autopie.phase2_join_outc_to_calls": [], "model.demo_autopie.phase2_join_disp_to_calls": []}}